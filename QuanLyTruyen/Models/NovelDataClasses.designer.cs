#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyTruyen.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyTruyen")]
	public partial class NovelDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertmember(member instance);
    partial void Updatemember(member instance);
    partial void Deletemember(member instance);
    partial void Insertnovel(novel instance);
    partial void Updatenovel(novel instance);
    partial void Deletenovel(novel instance);
    partial void InsertnovelChapter(novelChapter instance);
    partial void UpdatenovelChapter(novelChapter instance);
    partial void DeletenovelChapter(novelChapter instance);
    partial void Insertnoveltag(noveltag instance);
    partial void Updatenoveltag(noveltag instance);
    partial void Deletenoveltag(noveltag instance);
    partial void Inserttag(tag instance);
    partial void Updatetag(tag instance);
    partial void Deletetag(tag instance);
    #endregion
		
		public NovelDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QuanLyTruyenConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NovelDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovelDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovelDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NovelDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<member> members
		{
			get
			{
				return this.GetTable<member>();
			}
		}
		
		public System.Data.Linq.Table<novel> novels
		{
			get
			{
				return this.GetTable<novel>();
			}
		}
		
		public System.Data.Linq.Table<novelChapter> novelChapters
		{
			get
			{
				return this.GetTable<novelChapter>();
			}
		}
		
		public System.Data.Linq.Table<noveltag> noveltags
		{
			get
			{
				return this.GetTable<noveltag>();
			}
		}
		
		public System.Data.Linq.Table<tag> tags
		{
			get
			{
				return this.GetTable<tag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.member")]
	public partial class member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _username;
		
		private string _passcode;
		
		private System.Nullable<int> _accounttype;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasscodeChanging(string value);
    partial void OnpasscodeChanged();
    partial void OnaccounttypeChanging(System.Nullable<int> value);
    partial void OnaccounttypeChanged();
    #endregion
		
		public member()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passcode", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string passcode
		{
			get
			{
				return this._passcode;
			}
			set
			{
				if ((this._passcode != value))
				{
					this.OnpasscodeChanging(value);
					this.SendPropertyChanging();
					this._passcode = value;
					this.SendPropertyChanged("passcode");
					this.OnpasscodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accounttype", DbType="Int")]
		public System.Nullable<int> accounttype
		{
			get
			{
				return this._accounttype;
			}
			set
			{
				if ((this._accounttype != value))
				{
					this.OnaccounttypeChanging(value);
					this.SendPropertyChanging();
					this._accounttype = value;
					this.SendPropertyChanged("accounttype");
					this.OnaccounttypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.novel")]
	public partial class novel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NovelID;
		
		private string _NovelName;
		
		private System.Data.Linq.Binary _CoverImage;
		
		private string _Synopsis;
		
		private System.Nullable<int> _NovelStatus;
		
		private EntitySet<novelChapter> _novelChapters;
		
		private EntitySet<noveltag> _noveltags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNovelIDChanging(int value);
    partial void OnNovelIDChanged();
    partial void OnNovelNameChanging(string value);
    partial void OnNovelNameChanged();
    partial void OnCoverImageChanging(System.Data.Linq.Binary value);
    partial void OnCoverImageChanged();
    partial void OnSynopsisChanging(string value);
    partial void OnSynopsisChanged();
    partial void OnNovelStatusChanging(System.Nullable<int> value);
    partial void OnNovelStatusChanged();
    #endregion
		
		public novel()
		{
			this._novelChapters = new EntitySet<novelChapter>(new Action<novelChapter>(this.attach_novelChapters), new Action<novelChapter>(this.detach_novelChapters));
			this._noveltags = new EntitySet<noveltag>(new Action<noveltag>(this.attach_noveltags), new Action<noveltag>(this.detach_noveltags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NovelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NovelID
		{
			get
			{
				return this._NovelID;
			}
			set
			{
				if ((this._NovelID != value))
				{
					this.OnNovelIDChanging(value);
					this.SendPropertyChanging();
					this._NovelID = value;
					this.SendPropertyChanged("NovelID");
					this.OnNovelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NovelName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string NovelName
		{
			get
			{
				return this._NovelName;
			}
			set
			{
				if ((this._NovelName != value))
				{
					this.OnNovelNameChanging(value);
					this.SendPropertyChanging();
					this._NovelName = value;
					this.SendPropertyChanged("NovelName");
					this.OnNovelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoverImage", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CoverImage
		{
			get
			{
				return this._CoverImage;
			}
			set
			{
				if ((this._CoverImage != value))
				{
					this.OnCoverImageChanging(value);
					this.SendPropertyChanging();
					this._CoverImage = value;
					this.SendPropertyChanged("CoverImage");
					this.OnCoverImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Synopsis", DbType="NVarChar(MAX)")]
		public string Synopsis
		{
			get
			{
				return this._Synopsis;
			}
			set
			{
				if ((this._Synopsis != value))
				{
					this.OnSynopsisChanging(value);
					this.SendPropertyChanging();
					this._Synopsis = value;
					this.SendPropertyChanged("Synopsis");
					this.OnSynopsisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NovelStatus", DbType="Int")]
		public System.Nullable<int> NovelStatus
		{
			get
			{
				return this._NovelStatus;
			}
			set
			{
				if ((this._NovelStatus != value))
				{
					this.OnNovelStatusChanging(value);
					this.SendPropertyChanging();
					this._NovelStatus = value;
					this.SendPropertyChanged("NovelStatus");
					this.OnNovelStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novel_novelChapter", Storage="_novelChapters", ThisKey="NovelID", OtherKey="NovelID")]
		public EntitySet<novelChapter> novelChapters
		{
			get
			{
				return this._novelChapters;
			}
			set
			{
				this._novelChapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novel_noveltag", Storage="_noveltags", ThisKey="NovelID", OtherKey="NovelID")]
		public EntitySet<noveltag> noveltags
		{
			get
			{
				return this._noveltags;
			}
			set
			{
				this._noveltags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_novelChapters(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novel = this;
		}
		
		private void detach_novelChapters(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novel = null;
		}
		
		private void attach_noveltags(noveltag entity)
		{
			this.SendPropertyChanging();
			entity.novel = this;
		}
		
		private void detach_noveltags(noveltag entity)
		{
			this.SendPropertyChanging();
			entity.novel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.novelChapter")]
	public partial class novelChapter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChapterID;
		
		private string _ChapterName;
		
		private string _ChapterLink;
		
		private int _NovelID;
		
		private System.Nullable<int> _PrevID;
		
		private System.Nullable<int> _NextID;
		
		private EntitySet<novelChapter> _novelChapters;
		
		private EntitySet<novelChapter> _novelChapters1;
		
		private EntityRef<novelChapter> _novelChapter1;
		
		private EntityRef<novel> _novel;
		
		private EntityRef<novelChapter> _novelChapter2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChapterIDChanging(int value);
    partial void OnChapterIDChanged();
    partial void OnChapterNameChanging(string value);
    partial void OnChapterNameChanged();
    partial void OnChapterLinkChanging(string value);
    partial void OnChapterLinkChanged();
    partial void OnNovelIDChanging(int value);
    partial void OnNovelIDChanged();
    partial void OnPrevIDChanging(System.Nullable<int> value);
    partial void OnPrevIDChanged();
    partial void OnNextIDChanging(System.Nullable<int> value);
    partial void OnNextIDChanged();
    #endregion
		
		public novelChapter()
		{
			this._novelChapters = new EntitySet<novelChapter>(new Action<novelChapter>(this.attach_novelChapters), new Action<novelChapter>(this.detach_novelChapters));
			this._novelChapters1 = new EntitySet<novelChapter>(new Action<novelChapter>(this.attach_novelChapters1), new Action<novelChapter>(this.detach_novelChapters1));
			this._novelChapter1 = default(EntityRef<novelChapter>);
			this._novel = default(EntityRef<novel>);
			this._novelChapter2 = default(EntityRef<novelChapter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChapterID
		{
			get
			{
				return this._ChapterID;
			}
			set
			{
				if ((this._ChapterID != value))
				{
					this.OnChapterIDChanging(value);
					this.SendPropertyChanging();
					this._ChapterID = value;
					this.SendPropertyChanged("ChapterID");
					this.OnChapterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ChapterName
		{
			get
			{
				return this._ChapterName;
			}
			set
			{
				if ((this._ChapterName != value))
				{
					this.OnChapterNameChanging(value);
					this.SendPropertyChanging();
					this._ChapterName = value;
					this.SendPropertyChanged("ChapterName");
					this.OnChapterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChapterLink", DbType="NVarChar(MAX)")]
		public string ChapterLink
		{
			get
			{
				return this._ChapterLink;
			}
			set
			{
				if ((this._ChapterLink != value))
				{
					this.OnChapterLinkChanging(value);
					this.SendPropertyChanging();
					this._ChapterLink = value;
					this.SendPropertyChanged("ChapterLink");
					this.OnChapterLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NovelID", DbType="Int NOT NULL")]
		public int NovelID
		{
			get
			{
				return this._NovelID;
			}
			set
			{
				if ((this._NovelID != value))
				{
					if (this._novel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNovelIDChanging(value);
					this.SendPropertyChanging();
					this._NovelID = value;
					this.SendPropertyChanged("NovelID");
					this.OnNovelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevID", DbType="Int")]
		public System.Nullable<int> PrevID
		{
			get
			{
				return this._PrevID;
			}
			set
			{
				if ((this._PrevID != value))
				{
					if (this._novelChapter2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrevIDChanging(value);
					this.SendPropertyChanging();
					this._PrevID = value;
					this.SendPropertyChanged("PrevID");
					this.OnPrevIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextID", DbType="Int")]
		public System.Nullable<int> NextID
		{
			get
			{
				return this._NextID;
			}
			set
			{
				if ((this._NextID != value))
				{
					if (this._novelChapter1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextIDChanging(value);
					this.SendPropertyChanging();
					this._NextID = value;
					this.SendPropertyChanged("NextID");
					this.OnNextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novelChapter_novelChapter", Storage="_novelChapters", ThisKey="ChapterID", OtherKey="NextID")]
		public EntitySet<novelChapter> novelChapters
		{
			get
			{
				return this._novelChapters;
			}
			set
			{
				this._novelChapters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novelChapter_novelChapter1", Storage="_novelChapters1", ThisKey="ChapterID", OtherKey="PrevID")]
		public EntitySet<novelChapter> novelChapters1
		{
			get
			{
				return this._novelChapters1;
			}
			set
			{
				this._novelChapters1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novelChapter_novelChapter", Storage="_novelChapter1", ThisKey="NextID", OtherKey="ChapterID", IsForeignKey=true)]
		public novelChapter novelChapter1
		{
			get
			{
				return this._novelChapter1.Entity;
			}
			set
			{
				novelChapter previousValue = this._novelChapter1.Entity;
				if (((previousValue != value) 
							|| (this._novelChapter1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._novelChapter1.Entity = null;
						previousValue.novelChapters.Remove(this);
					}
					this._novelChapter1.Entity = value;
					if ((value != null))
					{
						value.novelChapters.Add(this);
						this._NextID = value.ChapterID;
					}
					else
					{
						this._NextID = default(Nullable<int>);
					}
					this.SendPropertyChanged("novelChapter1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novel_novelChapter", Storage="_novel", ThisKey="NovelID", OtherKey="NovelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public novel novel
		{
			get
			{
				return this._novel.Entity;
			}
			set
			{
				novel previousValue = this._novel.Entity;
				if (((previousValue != value) 
							|| (this._novel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._novel.Entity = null;
						previousValue.novelChapters.Remove(this);
					}
					this._novel.Entity = value;
					if ((value != null))
					{
						value.novelChapters.Add(this);
						this._NovelID = value.NovelID;
					}
					else
					{
						this._NovelID = default(int);
					}
					this.SendPropertyChanged("novel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novelChapter_novelChapter1", Storage="_novelChapter2", ThisKey="PrevID", OtherKey="ChapterID", IsForeignKey=true)]
		public novelChapter novelChapter2
		{
			get
			{
				return this._novelChapter2.Entity;
			}
			set
			{
				novelChapter previousValue = this._novelChapter2.Entity;
				if (((previousValue != value) 
							|| (this._novelChapter2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._novelChapter2.Entity = null;
						previousValue.novelChapters1.Remove(this);
					}
					this._novelChapter2.Entity = value;
					if ((value != null))
					{
						value.novelChapters1.Add(this);
						this._PrevID = value.ChapterID;
					}
					else
					{
						this._PrevID = default(Nullable<int>);
					}
					this.SendPropertyChanged("novelChapter2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_novelChapters(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novelChapter1 = this;
		}
		
		private void detach_novelChapters(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novelChapter1 = null;
		}
		
		private void attach_novelChapters1(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novelChapter2 = this;
		}
		
		private void detach_novelChapters1(novelChapter entity)
		{
			this.SendPropertyChanging();
			entity.novelChapter2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.noveltag")]
	public partial class noveltag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NovelID;
		
		private int _TagID;
		
		private EntityRef<novel> _novel;
		
		private EntityRef<tag> _tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNovelIDChanging(int value);
    partial void OnNovelIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    #endregion
		
		public noveltag()
		{
			this._novel = default(EntityRef<novel>);
			this._tag = default(EntityRef<tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NovelID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NovelID
		{
			get
			{
				return this._NovelID;
			}
			set
			{
				if ((this._NovelID != value))
				{
					if (this._novel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNovelIDChanging(value);
					this.SendPropertyChanging();
					this._NovelID = value;
					this.SendPropertyChanged("NovelID");
					this.OnNovelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="novel_noveltag", Storage="_novel", ThisKey="NovelID", OtherKey="NovelID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public novel novel
		{
			get
			{
				return this._novel.Entity;
			}
			set
			{
				novel previousValue = this._novel.Entity;
				if (((previousValue != value) 
							|| (this._novel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._novel.Entity = null;
						previousValue.noveltags.Remove(this);
					}
					this._novel.Entity = value;
					if ((value != null))
					{
						value.noveltags.Add(this);
						this._NovelID = value.NovelID;
					}
					else
					{
						this._NovelID = default(int);
					}
					this.SendPropertyChanged("novel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_noveltag", Storage="_tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public tag tag
		{
			get
			{
				return this._tag.Entity;
			}
			set
			{
				tag previousValue = this._tag.Entity;
				if (((previousValue != value) 
							|| (this._tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tag.Entity = null;
						previousValue.noveltags.Remove(this);
					}
					this._tag.Entity = value;
					if ((value != null))
					{
						value.noveltags.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tag")]
	public partial class tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private string _TagName;
		
		private EntitySet<noveltag> _noveltags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    #endregion
		
		public tag()
		{
			this._noveltags = new EntitySet<noveltag>(new Action<noveltag>(this.attach_noveltags), new Action<noveltag>(this.detach_noveltags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tag_noveltag", Storage="_noveltags", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<noveltag> noveltags
		{
			get
			{
				return this._noveltags;
			}
			set
			{
				this._noveltags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_noveltags(noveltag entity)
		{
			this.SendPropertyChanging();
			entity.tag = this;
		}
		
		private void detach_noveltags(noveltag entity)
		{
			this.SendPropertyChanging();
			entity.tag = null;
		}
	}
}
#pragma warning restore 1591
